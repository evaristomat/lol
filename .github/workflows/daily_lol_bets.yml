name: Daily LOL Bets Automation

on:
  schedule:
    - cron: '0 9 * * *'   # 6:00 AM Brasília
    - cron: '0 15 * * *'  # 12:00 PM Brasília  
    - cron: '0 21 * * *'  # 6:00 PM Brasília
  workflow_dispatch:       # Permite execução manual

jobs:
  run-daily-bets:
    runs-on: ubuntu-latest
    
    steps:
    # Passo 1: Fazer checkout do código
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: main

    # Passo 2: Configurar Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # Passo 3: Instalar dependências
    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    # Passo 4: Criar arquivo .env com variáveis (apenas API_KEY é secreta)
    - name: Create environment file
      env:
        BETSAPI_API_KEY: ${{ secrets.BETSAPI_API_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        echo "BETSAPI_API_KEY=$BETSAPI_API_KEY" > .env
        echo "CACHE_TTL=300" >> .env
        echo "BASE_URL=https://api.betsapi.com/v1" >> .env
        echo "REQUEST_TIMEOUT=30" >> .env
        echo "✅ Environment file created"

    # Passo 4.5: Criar diretórios necessários
    - name: Create required directories
      run: |
        mkdir -p data
        mkdir -p logs
        mkdir -p reports
        echo "✅ Directories created"

    # Passo 5: Executar script para obter odds dos próximos 10 dias
    - name: Get upcoming odds (10 days)
      run: |
        echo "📊 Fetching upcoming odds..."
        cd scripts && python db_get_odds.py
        echo "✅ Odds retrieved and stored in database"

    # Passo 6: Executar script para atualizar resultados dos últimos 2 dias
    - name: Get recent match results (2 days)
      run: |
        echo "🏆 Fetching recent match results..."
        cd scripts && python db_get_matches.py
        echo "✅ Match results retrieved and stored in database"

    # Passo 7: Executar script para atualizar resultados de apostas
    - name: Update bet results
      run: |
        echo "💰 Updating bet results..."
        cd scripts && python db_get_bet_results.py
        echo "✅ Bet results updated in database"

    # Passo 8: Executar script para verificar novas apostas de valor
    - name: Find value bets
      run: |
        echo "🔍 Analyzing value bets..."
        cd scripts && python db_get_bets.py
        echo "✅ Value bets analysis completed and stored in database"

    # Passo 9: Verificar se há mudanças nos bancos de dados
    - name: Check for database changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain data/*.db 2>/dev/null)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "📝 Database changes detected"
          git status --porcelain data/*.db
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "📝 No database changes detected"
        fi

    # Passo 10: Fazer commit e push dos bancos de dados atualizados
    - name: Commit and push updated databases
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        # Configurar Git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # IMPORTANTE: Adicionar os arquivos ANTES de fazer pull
        echo "📦 Adding database files to staging..."
        git add data/*.db
        
        # Fazer stash das mudanças staged para preservá-las
        echo "💾 Stashing changes..."
        git stash
        
        # Fazer pull das mudanças remotas
        echo "⬇️ Pulling latest changes from remote..."
        git pull --rebase origin main
        
        # Aplicar o stash de volta
        echo "📋 Applying stashed changes..."
        git stash pop || true  # || true para não falhar se não houver conflitos menores
        
        # Adicionar novamente os arquivos (caso necessário após o stash pop)
        git add data/*.db
        
        # Fazer commit
        echo "💬 Creating commit..."
        git commit -m "🤖 Auto-update databases: $(date +'%Y-%m-%d %H:%M UTC')" || {
          echo "⚠️ No changes to commit after merge"
          exit 0
        }
        
        # Fazer push com retry em caso de falha
        echo "⬆️ Pushing to remote..."
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if git push origin main; then
            echo "✅ Updated databases pushed to repository"
            break
          else
            echo "⚠️ Push failed (attempt $attempt/$max_attempts)"
            if [ $attempt -lt $max_attempts ]; then
              echo "🔄 Pulling latest changes and retrying..."
              git pull --rebase origin main
              attempt=$((attempt + 1))
              sleep 2
            else
              echo "❌ Failed to push after $max_attempts attempts"
              exit 1
            fi
          fi
        done

    # Passo 11: Resumo da execução
    - name: Execution Summary
      if: always()
      run: |
        echo "🎯 === EXECUTION SUMMARY ==="
        echo "📅 Date: $(date +'%Y-%m-%d %H:%M UTC')"
        echo "🔄 Workflow status: ${{ job.status }}"
        echo "💾 Database files updated:"
        ls -la data/*.db 2>/dev/null || echo "No database files found"
        echo "📊 Check repository for updated database files"
        
        # Mostrar últimos commits para verificação
        echo ""
        echo "📜 Last 3 commits:"
        git log --oneline -3